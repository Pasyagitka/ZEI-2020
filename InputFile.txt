symbolic func  	 foo(symbolic str,tiny k,tiny m)
[
show("symblen")!
set tiny p    : symblen(str)!
show(str)!
giveback str!
]
tiny func  	 boo()
[
show("boo function")!
giveback 19!
]
perform 
[
~set symbolic r : foo(r)!
~set symbolic r : show("f")!
set tiny x : m100!
show(x)!
set tiny y : 37q!
show(y)!

y : x / 2!
show(y)!
set tiny a : x+y+22h!
show(a)!
set symbolic 	str : "sp ace"!
show(str)!
set symbolic  mystr : "а бв?гдежзикла	мопростуфхцч"!
set logical mb : true!                                                                    ~алащуащуа
set logical mbd : true! 
show(mb)!
show("convert to tiny mystr")!
set tiny convert : symbtotiny(mystr)!
show(convert)!

when (mb ^ false)
[
a:101!
a: 19+1!
show(a)!
~show()!
]
otherwise
[
~show(foolen)!
show(str)!
]
set tiny fef :  (x -12)	# (a +y)!

loop(fef>5)
[
 fef : fef+1!
]
show(fef)!
]